from collections.abc import Callable, Iterable, Iterator
from pythonic_fp.fptools.maybe import MayBe
from typing import TypeVar

__all__ = ['DEQueue', 'de_queue']

D = TypeVar('D')

class DEQueue[D]:
    def __init__(self, *dss: Iterable[D]) -> None: ...
    def __bool__(self) -> bool: ...
    def __len__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __iter__(self) -> Iterator[D]: ...
    def __reversed__(self) -> Iterator[D]: ...
    def copy(self) -> DEQueue[D]: ...
    def pushl(self, *ds: D) -> None: ...
    def pushr(self, *ds: D) -> None: ...
    def popl(self) -> MayBe[D]: ...
    def popr(self) -> MayBe[D]: ...
    def peakl(self) -> MayBe[D]: ...
    def peakr(self) -> MayBe[D]: ...
    def foldl[L](self, f: Callable[[L, D], L], start: L | None = None) -> MayBe[L]: ...
    def foldr[R](self, f: Callable[[D, R], R], start: R | None = None) -> MayBe[R]: ...
    def map[U](self, f: Callable[[D], U]) -> DEQueue[U]: ...

def de_queue[D](*ds: D) -> DEQueue[D]: ...
