from collections.abc import Callable, Iterable, Iterator
from pythonic_fp.fptools.maybe import MayBe

__all__ = ['LIFOQueue', 'lifo_queue']

class LIFOQueue[D]:
    def __init__(self, *dss: Iterable[D]) -> None: ...
    def __bool__(self) -> bool: ...
    def __len__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __iter__(self) -> Iterator[D]: ...
    def copy(self) -> LIFOQueue[D]: ...
    def push(self, *ds: D) -> None: ...
    def pop(self) -> MayBe[D]: ...
    def peak(self) -> MayBe[D]: ...
    def fold[T](self, f: Callable[[T, D], T], start: T | None = None) -> MayBe[T]: ...
    def map[U](self, f: Callable[[D], U]) -> LIFOQueue[U]: ...

def lifo_queue[D](*ds: D) -> LIFOQueue[D]: ...
